// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackwiseAPI.DBContext;

#nullable disable

namespace TrackwiseAPI.Migrations
{
    [DbContext(typeof(TwDbContext))]
    partial class TwDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TrackwiseAPI.DBContext.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Admin", b =>
                {
                    b.Property<string>("Admin_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Admin_ID");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Admin_ID = "1",
                            Email = "hanruduplessis@gmail.com",
                            Lastname = "du Plessis",
                            Name = "Hanru",
                            Password = "hanru123"
                        },
                        new
                        {
                            Admin_ID = "2",
                            Email = "admin@gmail.com",
                            Lastname = "admin",
                            Name = "admin",
                            Password = "admin123"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Client", b =>
                {
                    b.Property<string>("Client_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Client_ID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Customer", b =>
                {
                    b.Property<string>("Customer_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Customer_ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Customer_ID = "1",
                            Email = "johndoe@gmail.com",
                            LastName = "Doe",
                            Name = "John",
                            Password = "john123"
                        },
                        new
                        {
                            Customer_ID = "2",
                            Email = "janesmith@gmail.com",
                            LastName = "Smith",
                            Name = "Jane",
                            Password = "jane123"
                        },
                        new
                        {
                            Customer_ID = "3",
                            Email = "joemama@gmail.com",
                            LastName = "Mama",
                            Name = "Joe",
                            Password = "joe123"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Delivery", b =>
                {
                    b.Property<string>("Delivery_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Delivery_Weight")
                        .HasColumnType("float");

                    b.Property<string>("Driver_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Job_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrailerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TruckID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Delivery_ID");

                    b.HasIndex("Driver_ID");

                    b.HasIndex("Job_ID");

                    b.HasIndex("TrailerID");

                    b.HasIndex("TruckID");

                    b.ToTable("Deliveries");

                    b.HasData(
                        new
                        {
                            Delivery_ID = "1",
                            Delivery_Weight = 35.0,
                            Driver_ID = "1",
                            Job_ID = "1",
                            TrailerID = "1",
                            TruckID = "1"
                        },
                        new
                        {
                            Delivery_ID = "2",
                            Delivery_Weight = 35.0,
                            Driver_ID = "1",
                            Job_ID = "2",
                            TrailerID = "1",
                            TruckID = "1"
                        },
                        new
                        {
                            Delivery_ID = "3",
                            Delivery_Weight = 35.0,
                            Driver_ID = "1",
                            Job_ID = "2",
                            TrailerID = "1",
                            TruckID = "1"
                        },
                        new
                        {
                            Delivery_ID = "4",
                            Delivery_Weight = 35.0,
                            Driver_ID = "1",
                            Job_ID = "2",
                            TrailerID = "1",
                            TruckID = "1"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Driver", b =>
                {
                    b.Property<string>("Driver_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Driver_Status_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Driver_ID");

                    b.HasIndex("Driver_Status_ID");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Driver_ID = "1",
                            Driver_Status_ID = "1",
                            Email = "Driver1@gmail.com",
                            Lastname = "Koen",
                            Name = "Driver1",
                            PhoneNumber = "0761532265"
                        },
                        new
                        {
                            Driver_ID = "2",
                            Driver_Status_ID = "1",
                            Email = "Driver2@gmail.com",
                            Lastname = "Poen",
                            Name = "Driver2",
                            PhoneNumber = "0761532265"
                        },
                        new
                        {
                            Driver_ID = "3",
                            Driver_Status_ID = "1",
                            Email = "Driver3@gmail.com",
                            Lastname = "Soen",
                            Name = "Driver3",
                            PhoneNumber = "0761532265"
                        },
                        new
                        {
                            Driver_ID = "4",
                            Driver_Status_ID = "1",
                            Email = "Driver4@gmail.com",
                            Lastname = "Loen",
                            Name = "Driver4",
                            PhoneNumber = "0761532265"
                        },
                        new
                        {
                            Driver_ID = "5",
                            Driver_Status_ID = "1",
                            Email = "Driver5@gmail.com",
                            Lastname = "Hoen",
                            Name = "Driver5",
                            PhoneNumber = "0761532265"
                        },
                        new
                        {
                            Driver_ID = "6",
                            Driver_Status_ID = "1",
                            Email = "Driver6@gmail.com",
                            Lastname = "Joen",
                            Name = "Driver6",
                            PhoneNumber = "0761532265"
                        },
                        new
                        {
                            Driver_ID = "7",
                            Driver_Status_ID = "1",
                            Email = "Driver7@gmail.com",
                            Lastname = "Doen",
                            Name = "Driver7",
                            PhoneNumber = "0761532265"
                        },
                        new
                        {
                            Driver_ID = "8",
                            Driver_Status_ID = "1",
                            Email = "Driver8@gmail.com",
                            Lastname = "Roen",
                            Name = "Driver8",
                            PhoneNumber = "0761532265"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.DriverStatus", b =>
                {
                    b.Property<string>("Driver_Status_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Driver_Status_ID");

                    b.ToTable("DriverStatuses");

                    b.HasData(
                        new
                        {
                            Driver_Status_ID = "1",
                            Description = "Driver is available",
                            Status = "Available"
                        },
                        new
                        {
                            Driver_Status_ID = "2",
                            Description = "Driver is busy with a job",
                            Status = "Unavailable"
                        },
                        new
                        {
                            Driver_Status_ID = "3",
                            Description = "Driver is unable to do a job",
                            Status = "Busy"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Help", b =>
                {
                    b.Property<string>("Help_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Help_Category_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Help_ID");

                    b.HasIndex("Help_Category_ID");

                    b.ToTable("Helps");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.HelpCategory", b =>
                {
                    b.Property<string>("Help_Category_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Help_Category_ID");

                    b.ToTable("HelpCategories");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("reorder_total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Product_ID")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Invoice", b =>
                {
                    b.Property<string>("Invoice_number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Order_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Total_Amount")
                        .HasColumnType("float");

                    b.HasKey("Invoice_number");

                    b.HasIndex("Order_ID");

                    b.ToTable("Invoice");

                    b.HasData(
                        new
                        {
                            Invoice_number = "1",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5155),
                            Order_ID = "1",
                            Total_Amount = 200.5
                        },
                        new
                        {
                            Invoice_number = "2",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5156),
                            Order_ID = "2",
                            Total_Amount = 75.200000000000003
                        },
                        new
                        {
                            Invoice_number = "3",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5157),
                            Order_ID = "3",
                            Total_Amount = 450.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Job", b =>
                {
                    b.Property<string>("Job_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Admin_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dropoff_Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Job_Status_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Job_Type_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pickup_Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Total_Weight")
                        .HasColumnType("float");

                    b.HasKey("Job_ID");

                    b.HasIndex("Admin_ID");

                    b.HasIndex("Job_Status_ID");

                    b.HasIndex("Job_Type_ID");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Job_ID = "1",
                            Admin_ID = "1",
                            Dropoff_Location = "Bela-Bela, Limpopo, South Africa",
                            DueDate = new DateTime(2023, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Job_Status_ID = "2",
                            Job_Type_ID = "1",
                            Pickup_Location = "lephalale, Limpopo, South Africa",
                            StartDate = new DateTime(2023, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total_Weight = 35.0
                        },
                        new
                        {
                            Job_ID = "2",
                            Admin_ID = "1",
                            Dropoff_Location = "Bela-Bela, Limpopo, South Africa",
                            DueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Job_Status_ID = "2",
                            Job_Type_ID = "1",
                            Pickup_Location = "lephalale, Limpopo, South Africa",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total_Weight = 105.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.JobStatus", b =>
                {
                    b.Property<string>("Job_Status_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Job_Status_ID");

                    b.ToTable("JobsStatus");

                    b.HasData(
                        new
                        {
                            Job_Status_ID = "1",
                            Description = "Transporting in progress",
                            Name = "In-opperation"
                        },
                        new
                        {
                            Job_Status_ID = "2",
                            Description = "Transporting complete",
                            Name = "Complete"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.JobType", b =>
                {
                    b.Property<string>("Job_Type_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Job_Type_ID");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Job_Type_ID = "1",
                            Description = "Transporting coal",
                            Name = "Coal"
                        },
                        new
                        {
                            Job_Type_ID = "2",
                            Description = "Transporting fuel",
                            Name = "Fuel"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Order", b =>
                {
                    b.Property<string>("Order_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Customer_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Order_ID");

                    b.HasIndex("Customer_ID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Order_ID = "1",
                            Customer_ID = "1",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5104),
                            Status = "Ordered",
                            Total = 2897.0
                        },
                        new
                        {
                            Order_ID = "2",
                            Customer_ID = "2",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5116),
                            Status = "Ordered",
                            Total = 2997.0
                        },
                        new
                        {
                            Order_ID = "3",
                            Customer_ID = "3",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5117),
                            Status = "Ordered",
                            Total = 2998.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Order_Line", b =>
                {
                    b.Property<string>("Orderid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Productid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Order_line_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.HasKey("Orderid", "Productid");

                    b.HasIndex("Productid");

                    b.ToTable("Order_Lines");

                    b.HasData(
                        new
                        {
                            Orderid = "1",
                            Productid = "1",
                            Order_line_ID = "8",
                            Quantity = 2,
                            SubTotal = 1998.0
                        },
                        new
                        {
                            Orderid = "1",
                            Productid = "2",
                            Order_line_ID = "8",
                            Quantity = 1,
                            SubTotal = 899.0
                        },
                        new
                        {
                            Orderid = "2",
                            Productid = "1",
                            Order_line_ID = "8",
                            Quantity = 3,
                            SubTotal = 2997.0
                        },
                        new
                        {
                            Orderid = "3",
                            Productid = "3",
                            Order_line_ID = "8",
                            Quantity = 2,
                            SubTotal = 2998.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Payment", b =>
                {
                    b.Property<string>("Payment_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Order_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Payment_Type_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("amount_paid")
                        .HasColumnType("float");

                    b.HasKey("Payment_ID");

                    b.HasIndex("Order_ID");

                    b.HasIndex("Payment_Type_ID");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Payment_ID = "1",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5167),
                            Order_ID = "1",
                            Payment_Type_ID = "1",
                            amount_paid = 150.5
                        },
                        new
                        {
                            Payment_ID = "2",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5168),
                            Order_ID = "1",
                            Payment_Type_ID = "2",
                            amount_paid = 50.0
                        },
                        new
                        {
                            Payment_ID = "3",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5168),
                            Order_ID = "2",
                            Payment_Type_ID = "3",
                            amount_paid = 75.200000000000003
                        },
                        new
                        {
                            Payment_ID = "4",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5169),
                            Order_ID = "3",
                            Payment_Type_ID = "1",
                            amount_paid = 200.0
                        },
                        new
                        {
                            Payment_ID = "5",
                            Date = new DateTime(2023, 7, 24, 0, 11, 9, 114, DateTimeKind.Local).AddTicks(5170),
                            Order_ID = "3",
                            Payment_Type_ID = "2",
                            amount_paid = 250.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.PaymentType", b =>
                {
                    b.Property<string>("Payment_Type_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descrtipion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Payment_Type_ID");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            Payment_Type_ID = "1",
                            Descrtipion = "Customer paid with credit card",
                            Name = "Credit Card"
                        },
                        new
                        {
                            Payment_Type_ID = "2",
                            Descrtipion = "Customer paid with EFT",
                            Name = "EFT"
                        },
                        new
                        {
                            Payment_Type_ID = "3",
                            Descrtipion = "Customer paid with cash",
                            Name = "Cash"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Product", b =>
                {
                    b.Property<string>("Product_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_Category_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Product_Price")
                        .HasColumnType("float");

                    b.Property<string>("Product_Type_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Product_ID");

                    b.HasIndex("Product_Category_ID");

                    b.HasIndex("Product_Type_ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Product_ID = "1",
                            Product_Category_ID = "4",
                            Product_Description = "FUEL PRIMER PUMP/K5",
                            Product_Name = "Fuel Pump",
                            Product_Price = 999.0,
                            Product_Type_ID = "2"
                        },
                        new
                        {
                            Product_ID = "2",
                            Product_Category_ID = "5",
                            Product_Description = "SEAL RING MB-S48",
                            Product_Name = "SEAL RING",
                            Product_Price = 899.0,
                            Product_Type_ID = "1"
                        },
                        new
                        {
                            Product_ID = "3",
                            Product_Category_ID = "7",
                            Product_Description = "CLUTCH MASTER CYL 24mm SIDE MOUNT-S10",
                            Product_Name = "CLUTCH",
                            Product_Price = 1499.0,
                            Product_Type_ID = "2"
                        },
                        new
                        {
                            Product_ID = "4",
                            Product_Category_ID = "7",
                            Product_Description = "SAF AXLE NUT LEFT M75x1.5 (85mm)",
                            Product_Name = "AXLE NUT",
                            Product_Price = 1199.0,
                            Product_Type_ID = "1"
                        },
                        new
                        {
                            Product_ID = "5",
                            Product_Category_ID = "8",
                            Product_Description = "BEARING INN ROCKWELL TM 218248/210/HM",
                            Product_Name = "BEARING",
                            Product_Price = 9.9900000000000002,
                            Product_Type_ID = "1"
                        },
                        new
                        {
                            Product_ID = "6",
                            Product_Category_ID = "6",
                            Product_Description = "SEAL OIL STEERING M/B AXOR-S46",
                            Product_Name = "SEAL OIL",
                            Product_Price = 119.98999999999999,
                            Product_Type_ID = "1"
                        },
                        new
                        {
                            Product_ID = "7",
                            Product_Category_ID = "7",
                            Product_Description = "BRAKEPAD TO FIT MAN TGS/TGX WVA29279",
                            Product_Name = "BRAKEPAD",
                            Product_Price = 799.0,
                            Product_Type_ID = "1"
                        },
                        new
                        {
                            Product_ID = "8",
                            Product_Category_ID = "1",
                            Product_Description = "FAN BELT 9PK2300-U7",
                            Product_Name = "FAN BELT",
                            Product_Price = 455.0,
                            Product_Type_ID = "1"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.ProductCategory", b =>
                {
                    b.Property<string>("Product_Category_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Product_Category_ID");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Product_Category_ID = "1",
                            Description = "products for engines",
                            Name = "Engine"
                        },
                        new
                        {
                            Product_Category_ID = "2",
                            Description = "products for transmissions",
                            Name = "Transmission"
                        },
                        new
                        {
                            Product_Category_ID = "3",
                            Description = "products for suspensions",
                            Name = "Suspension"
                        },
                        new
                        {
                            Product_Category_ID = "4",
                            Description = "products for electrical",
                            Name = "Electrical"
                        },
                        new
                        {
                            Product_Category_ID = "5",
                            Description = "products for body",
                            Name = "Body"
                        },
                        new
                        {
                            Product_Category_ID = "6",
                            Description = "products for brakes",
                            Name = "Brake"
                        },
                        new
                        {
                            Product_Category_ID = "7",
                            Description = "products for wheels",
                            Name = "Wheel"
                        },
                        new
                        {
                            Product_Category_ID = "8",
                            Description = "bolts,nuts ect..",
                            Name = "Consumables"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.ProductType", b =>
                {
                    b.Property<string>("Product_Type_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Product_Type_ID");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Product_Type_ID = "1",
                            Description = "Product has trailer components",
                            Name = "Truck"
                        },
                        new
                        {
                            Product_Type_ID = "2",
                            Description = "Product has truck components",
                            Name = "Trailer"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Product_Supplier", b =>
                {
                    b.Property<string>("Supplierid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Productid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_Supplier_ID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Supplierid", "Productid");

                    b.HasIndex("Productid");

                    b.ToTable("Product_Suppliers");

                    b.HasData(
                        new
                        {
                            Supplierid = "1",
                            Productid = "1",
                            Product_Supplier_ID = "1"
                        },
                        new
                        {
                            Supplierid = "1",
                            Productid = "2",
                            Product_Supplier_ID = "2"
                        },
                        new
                        {
                            Supplierid = "2",
                            Productid = "2",
                            Product_Supplier_ID = "3"
                        },
                        new
                        {
                            Supplierid = "2",
                            Productid = "3",
                            Product_Supplier_ID = "4"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Supplier", b =>
                {
                    b.Property<string>("Supplier_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contact_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Supplier_ID");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Supplier_ID = "1",
                            Contact_Number = "0125554789",
                            Email = "abc@gmail.com",
                            Name = "ABC Suppliers"
                        },
                        new
                        {
                            Supplier_ID = "2",
                            Contact_Number = "0125554789",
                            Email = "xyz@gmail.com",
                            Name = "XYZ Suppliers"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Trailer", b =>
                {
                    b.Property<string>("TrailerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trailer_License")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trailer_Status_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Trailer_Type_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("TrailerID");

                    b.HasIndex("Trailer_Status_ID");

                    b.HasIndex("Trailer_Type_ID");

                    b.ToTable("Trailers");

                    b.HasData(
                        new
                        {
                            TrailerID = "1",
                            Model = "Palumbo",
                            Trailer_License = "PO69EN L",
                            Trailer_Status_ID = "1",
                            Trailer_Type_ID = "1",
                            Weight = 35.0
                        },
                        new
                        {
                            TrailerID = "2",
                            Model = "Palumbo",
                            Trailer_License = "EH42ML L",
                            Trailer_Status_ID = "1",
                            Trailer_Type_ID = "2",
                            Weight = 35.0
                        },
                        new
                        {
                            TrailerID = "3",
                            Model = "Palumbo",
                            Trailer_License = "PQ11LE L",
                            Trailer_Status_ID = "1",
                            Trailer_Type_ID = "2",
                            Weight = 35.0
                        },
                        new
                        {
                            TrailerID = "4",
                            Model = "Palumbo",
                            Trailer_License = "HJ91LO L",
                            Trailer_Status_ID = "1",
                            Trailer_Type_ID = "1",
                            Weight = 35.0
                        },
                        new
                        {
                            TrailerID = "5",
                            Model = "Palumbo",
                            Trailer_License = "AS99BN L",
                            Trailer_Status_ID = "1",
                            Trailer_Type_ID = "1",
                            Weight = 35.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TrailerStatus", b =>
                {
                    b.Property<string>("Trailer_Status_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trailer_Status_ID");

                    b.ToTable("TrailerStatuses");

                    b.HasData(
                        new
                        {
                            Trailer_Status_ID = "1",
                            Description = "Trailer is available for job",
                            Status = "Available"
                        },
                        new
                        {
                            Trailer_Status_ID = "2",
                            Description = "Trailer is busy with a job",
                            Status = "Unavailable"
                        },
                        new
                        {
                            Trailer_Status_ID = "3",
                            Description = "Trailer is undergoing maintenace",
                            Status = "Under Maintenance"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TrailerType", b =>
                {
                    b.Property<string>("Trailer_Type_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trailer_Type_ID");

                    b.ToTable("TrailerTypes");

                    b.HasData(
                        new
                        {
                            Trailer_Type_ID = "1",
                            Description = "Coal transportation trailer",
                            Name = "Coal"
                        },
                        new
                        {
                            Trailer_Type_ID = "2",
                            Description = "Fuel transportation trailer",
                            Name = "Fuel"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Truck", b =>
                {
                    b.Property<string>("TruckID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Truck_License")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Truck_Status_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TruckID");

                    b.HasIndex("Truck_Status_ID");

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            TruckID = "1",
                            Model = "Mercedes",
                            Truck_License = "GH39QP L",
                            Truck_Status_ID = "1"
                        },
                        new
                        {
                            TruckID = "2",
                            Model = "Mercedes",
                            Truck_License = "AJ11LL L",
                            Truck_Status_ID = "1"
                        },
                        new
                        {
                            TruckID = "3",
                            Model = "Mercedes",
                            Truck_License = "LL19AQ L",
                            Truck_Status_ID = "1"
                        },
                        new
                        {
                            TruckID = "4",
                            Model = "Mercedes",
                            Truck_License = "TT11PP L",
                            Truck_Status_ID = "1"
                        },
                        new
                        {
                            TruckID = "5",
                            Model = "Mercedes",
                            Truck_License = "QW12ER L",
                            Truck_Status_ID = "1"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TruckStatus", b =>
                {
                    b.Property<string>("Truck_Status_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Truck_Status_ID");

                    b.ToTable("TruckStatuses");

                    b.HasData(
                        new
                        {
                            Truck_Status_ID = "1",
                            Description = "Truck is available for job",
                            Status = "Available"
                        },
                        new
                        {
                            Truck_Status_ID = "2",
                            Description = "Truck is busy with a job",
                            Status = "Unavailable"
                        },
                        new
                        {
                            Truck_Status_ID = "3",
                            Description = "Truck is undergoing maintenace",
                            Status = "Under Maintenance"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TrackwiseAPI.DBContext.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TrackwiseAPI.DBContext.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.DBContext.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TrackwiseAPI.DBContext.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Delivery", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Driver", "Driver")
                        .WithMany("Deliveries")
                        .HasForeignKey("Driver_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.Job", "Job")
                        .WithMany("Deliveries")
                        .HasForeignKey("Job_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.Trailer", "Trailer")
                        .WithMany("Deliveries")
                        .HasForeignKey("TrailerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.Truck", "Truck")
                        .WithMany("Deliveries")
                        .HasForeignKey("TruckID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Job");

                    b.Navigation("Trailer");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Driver", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.DriverStatus", "DriverStatus")
                        .WithMany("Drivers")
                        .HasForeignKey("Driver_Status_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverStatus");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Help", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.HelpCategory", "HelpCategory")
                        .WithMany("Helps")
                        .HasForeignKey("Help_Category_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HelpCategory");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Inventory", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("TrackwiseAPI.Models.Entities.Inventory", "Product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Invoice", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Order", "Order")
                        .WithMany("invoices")
                        .HasForeignKey("Order_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Job", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Admin", "Admin")
                        .WithMany("Jobs")
                        .HasForeignKey("Admin_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.JobStatus", "JobStatus")
                        .WithMany("Jobs")
                        .HasForeignKey("Job_Status_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.JobType", "JobType")
                        .WithMany("Jobs")
                        .HasForeignKey("Job_Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("JobStatus");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Order", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Customer", "Customer")
                        .WithMany("orders")
                        .HasForeignKey("Customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Order_Line", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("Orderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.Product", "Product")
                        .WithMany("OrderLines")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Payment", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("Order_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("Payment_Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Product", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("Product_Category_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("Product_Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Product_Supplier", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Product", "Product")
                        .WithMany("Product_Suppliers")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.Supplier", "Supplier")
                        .WithMany("Product_Suppliers")
                        .HasForeignKey("Supplierid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Trailer", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.TrailerStatus", "TrailerStatus")
                        .WithMany("Trailers")
                        .HasForeignKey("Trailer_Status_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.TrailerType", "TrailerType")
                        .WithMany("Trailers")
                        .HasForeignKey("Trailer_Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrailerStatus");

                    b.Navigation("TrailerType");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Truck", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.TruckStatus", "TruckStatus")
                        .WithMany("Trucks")
                        .HasForeignKey("Truck_Status_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TruckStatus");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Admin", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Customer", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Driver", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.DriverStatus", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.HelpCategory", b =>
                {
                    b.Navigation("Helps");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Job", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.JobStatus", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.JobType", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("invoices");

                    b.Navigation("payments");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Product", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("OrderLines");

                    b.Navigation("Product_Suppliers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Supplier", b =>
                {
                    b.Navigation("Product_Suppliers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Trailer", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TrailerStatus", b =>
                {
                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TrailerType", b =>
                {
                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Truck", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TruckStatus", b =>
                {
                    b.Navigation("Trucks");
                });
#pragma warning restore 612, 618
        }
    }
}
