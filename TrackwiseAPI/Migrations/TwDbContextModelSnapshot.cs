// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackwiseAPI.DBContext;

#nullable disable

namespace TrackwiseAPI.Migrations
{
    [DbContext(typeof(TwDbContext))]
    partial class TwDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Admin", b =>
                {
                    b.Property<int>("Admin_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Admin_ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Admin_ID");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Admin_ID = 1,
                            Email = "hanruduplessis@gmail.com",
                            Lastname = "du Plessis",
                            Name = "Hanru",
                            Password = "hanru123"
                        },
                        new
                        {
                            Admin_ID = 2,
                            Email = "admin@gmail.com",
                            Lastname = "admin",
                            Name = "admin",
                            Password = "admin123"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Client", b =>
                {
                    b.Property<int>("Client_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Client_ID"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Client_ID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Customer", b =>
                {
                    b.Property<int>("Customer_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Customer_ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Customer_ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Customer_ID = 1,
                            Email = "johndoe@gmail.com",
                            LastName = "Doe",
                            Name = "John",
                            Password = "john123"
                        },
                        new
                        {
                            Customer_ID = 2,
                            Email = "janesmith@gmail.com",
                            LastName = "Smith",
                            Name = "Jane",
                            Password = "jane123"
                        },
                        new
                        {
                            Customer_ID = 3,
                            Email = "joemama@gmail.com",
                            LastName = "Mama",
                            Name = "Joe",
                            Password = "joe123"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Delivery", b =>
                {
                    b.Property<int>("Delivery_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Delivery_ID"));

                    b.Property<int>("Job_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TruckID")
                        .HasColumnType("int");

                    b.Property<double>("weight")
                        .HasColumnType("float");

                    b.HasKey("Delivery_ID");

                    b.HasIndex("Job_ID");

                    b.HasIndex("TruckID");

                    b.ToTable("deliveries");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Delivery_Assignment", b =>
                {
                    b.Property<int>("Driverid")
                        .HasColumnType("int");

                    b.Property<int>("Deliveryid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Delivery_Assignment_ID")
                        .HasColumnType("int");

                    b.HasKey("Driverid", "Deliveryid");

                    b.HasIndex("Deliveryid");

                    b.ToTable("Delivery_Assignments");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Driver", b =>
                {
                    b.Property<int>("Driver_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Driver_ID"));

                    b.Property<int>("Driver_Status_ID")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Driver_ID");

                    b.HasIndex("Driver_Status_ID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.DriverStatus", b =>
                {
                    b.Property<int>("Driver_Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Driver_Status_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Driver_Status_ID");

                    b.ToTable("DriverStatuses");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Help", b =>
                {
                    b.Property<int>("Help_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Help_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Help_Category_ID")
                        .HasColumnType("int");

                    b.HasKey("Help_ID");

                    b.HasIndex("Help_Category_ID");

                    b.ToTable("Helps");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.HelpCategory", b =>
                {
                    b.Property<int>("Help_Category_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Help_Category_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Help_Category_ID");

                    b.ToTable("HelpCategories");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("reorder_total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Product_ID")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Invoice", b =>
                {
                    b.Property<int>("Invoice_number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Invoice_number"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order_ID")
                        .HasColumnType("int");

                    b.Property<double>("Total_Amount")
                        .HasColumnType("float");

                    b.HasKey("Invoice_number");

                    b.HasIndex("Order_ID");

                    b.ToTable("Invoice");

                    b.HasData(
                        new
                        {
                            Invoice_number = 1,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4916),
                            Order_ID = 1,
                            Total_Amount = 200.5
                        },
                        new
                        {
                            Invoice_number = 2,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4917),
                            Order_ID = 2,
                            Total_Amount = 75.200000000000003
                        },
                        new
                        {
                            Invoice_number = 3,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4917),
                            Order_ID = 3,
                            Total_Amount = 450.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Job", b =>
                {
                    b.Property<int>("Job_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Job_ID"));

                    b.Property<int>("Admin_ID")
                        .HasColumnType("int");

                    b.Property<int>("Client_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dropoff_Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Job_Status_ID")
                        .HasColumnType("int");

                    b.Property<int>("Job_Type_ID")
                        .HasColumnType("int");

                    b.Property<string>("Pickup_Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Job_ID");

                    b.HasIndex("Admin_ID");

                    b.HasIndex("Client_ID");

                    b.HasIndex("Job_Status_ID");

                    b.HasIndex("Job_Type_ID");

                    b.ToTable("jobs");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.JobStatus", b =>
                {
                    b.Property<int>("Job_Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Job_Status_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Job_Status_ID");

                    b.ToTable("jobsStatus");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.JobType", b =>
                {
                    b.Property<int>("Job_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Job_Type_ID"));

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Job_Type_ID");

                    b.ToTable("jobTypes");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Order", b =>
                {
                    b.Property<int>("Order_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Order_ID"));

                    b.Property<int>("Customer_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Order_ID");

                    b.HasIndex("Customer_ID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Order_ID = 1,
                            Customer_ID = 1,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4864),
                            Status = "Ordered",
                            Total = 2897.0
                        },
                        new
                        {
                            Order_ID = 2,
                            Customer_ID = 2,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4876),
                            Status = "Ordered",
                            Total = 2997.0
                        },
                        new
                        {
                            Order_ID = 3,
                            Customer_ID = 3,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4877),
                            Status = "Ordered",
                            Total = 2998.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Order_Line", b =>
                {
                    b.Property<int>("Orderid")
                        .HasColumnType("int");

                    b.Property<int>("Productid")
                        .HasColumnType("int");

                    b.Property<int>("Order_line_ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.HasKey("Orderid", "Productid");

                    b.HasIndex("Productid");

                    b.ToTable("Order_Lines");

                    b.HasData(
                        new
                        {
                            Orderid = 1,
                            Productid = 1,
                            Order_line_ID = 1,
                            Quantity = 2,
                            SubTotal = 1998.0
                        },
                        new
                        {
                            Orderid = 1,
                            Productid = 2,
                            Order_line_ID = 2,
                            Quantity = 1,
                            SubTotal = 899.0
                        },
                        new
                        {
                            Orderid = 2,
                            Productid = 1,
                            Order_line_ID = 3,
                            Quantity = 3,
                            SubTotal = 2997.0
                        },
                        new
                        {
                            Orderid = 3,
                            Productid = 3,
                            Order_line_ID = 4,
                            Quantity = 2,
                            SubTotal = 2998.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Payment", b =>
                {
                    b.Property<int>("Payment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Payment_ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order_ID")
                        .HasColumnType("int");

                    b.Property<int>("Payment_Type_ID")
                        .HasColumnType("int");

                    b.Property<double>("amount_paid")
                        .HasColumnType("float");

                    b.HasKey("Payment_ID");

                    b.HasIndex("Order_ID");

                    b.HasIndex("Payment_Type_ID");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Payment_ID = 1,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4927),
                            Order_ID = 1,
                            Payment_Type_ID = 1,
                            amount_paid = 150.5
                        },
                        new
                        {
                            Payment_ID = 2,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4928),
                            Order_ID = 1,
                            Payment_Type_ID = 2,
                            amount_paid = 50.0
                        },
                        new
                        {
                            Payment_ID = 3,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4929),
                            Order_ID = 2,
                            Payment_Type_ID = 3,
                            amount_paid = 75.200000000000003
                        },
                        new
                        {
                            Payment_ID = 4,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4929),
                            Order_ID = 3,
                            Payment_Type_ID = 1,
                            amount_paid = 200.0
                        },
                        new
                        {
                            Payment_ID = 5,
                            Date = new DateTime(2023, 5, 19, 13, 53, 22, 825, DateTimeKind.Local).AddTicks(4930),
                            Order_ID = 3,
                            Payment_Type_ID = 2,
                            amount_paid = 250.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.PaymentType", b =>
                {
                    b.Property<int>("Payment_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Payment_Type_ID"));

                    b.Property<string>("Descrtipion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Payment_Type_ID");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            Payment_Type_ID = 1,
                            Descrtipion = "Customer paid with credit card",
                            Name = "Credit Card"
                        },
                        new
                        {
                            Payment_Type_ID = 2,
                            Descrtipion = "Customer paid with EFT",
                            Name = "EFT"
                        },
                        new
                        {
                            Payment_Type_ID = 3,
                            Descrtipion = "Customer paid with cash",
                            Name = "Cash"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Product", b =>
                {
                    b.Property<int>("Product_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product_ID"));

                    b.Property<int>("Product_Category_ID")
                        .HasColumnType("int");

                    b.Property<string>("Product_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Product_Price")
                        .HasColumnType("float");

                    b.HasKey("Product_ID");

                    b.HasIndex("Product_Category_ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Product_ID = 1,
                            Product_Category_ID = 4,
                            Product_Description = "FUEL PRIMER PUMP/K5",
                            Product_Name = "Feul Pump",
                            Product_Price = 999.0
                        },
                        new
                        {
                            Product_ID = 2,
                            Product_Category_ID = 9,
                            Product_Description = "SEAL RING MB-S48",
                            Product_Name = "SEAL RING",
                            Product_Price = 899.0
                        },
                        new
                        {
                            Product_ID = 3,
                            Product_Category_ID = 7,
                            Product_Description = "CLUTCH MASTER CYL 24mm SIDE MOUNT-S10",
                            Product_Name = "CLUTCH",
                            Product_Price = 1499.0
                        },
                        new
                        {
                            Product_ID = 4,
                            Product_Category_ID = 10,
                            Product_Description = "SAF AXLE NUT LEFT M75x1.5 (85mm)",
                            Product_Name = "AXLE NUT",
                            Product_Price = 1199.0
                        },
                        new
                        {
                            Product_ID = 5,
                            Product_Category_ID = 10,
                            Product_Description = "BEARING INN ROCKWELL TM 218248/210/HM",
                            Product_Name = "BEARING",
                            Product_Price = 9.9900000000000002
                        },
                        new
                        {
                            Product_ID = 6,
                            Product_Category_ID = 9,
                            Product_Description = "SEAL OIL STEERING M/B AXOR-S46",
                            Product_Name = "SEAL OIL",
                            Product_Price = 119.98999999999999
                        },
                        new
                        {
                            Product_ID = 7,
                            Product_Category_ID = 7,
                            Product_Description = "BRAKEPAD TO FIT MAN TGS/TGX WVA29279",
                            Product_Name = "BRAKEPAD",
                            Product_Price = 799.0
                        },
                        new
                        {
                            Product_ID = 8,
                            Product_Category_ID = 1,
                            Product_Description = "FAN BELT 9PK2300-U7",
                            Product_Name = "FAN BELT",
                            Product_Price = 455.0
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Product_Category_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product_Category_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Product_Type_ID")
                        .HasColumnType("int");

                    b.HasKey("Product_Category_ID");

                    b.HasIndex("Product_Type_ID");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Product_Category_ID = 1,
                            Description = "products for engines",
                            Name = "Engine",
                            Product_Type_ID = 1
                        },
                        new
                        {
                            Product_Category_ID = 2,
                            Description = "products for transmissions",
                            Name = "Transmission",
                            Product_Type_ID = 1
                        },
                        new
                        {
                            Product_Category_ID = 3,
                            Description = "products for suspensions",
                            Name = "Suspension",
                            Product_Type_ID = 1
                        },
                        new
                        {
                            Product_Category_ID = 4,
                            Description = "products for electrical",
                            Name = "Electrical",
                            Product_Type_ID = 1
                        },
                        new
                        {
                            Product_Category_ID = 5,
                            Description = "products for electrical",
                            Name = "Electrical",
                            Product_Type_ID = 2
                        },
                        new
                        {
                            Product_Category_ID = 6,
                            Description = "products for body",
                            Name = "Body",
                            Product_Type_ID = 1
                        },
                        new
                        {
                            Product_Category_ID = 7,
                            Description = "products for brakes",
                            Name = "Brake",
                            Product_Type_ID = 1
                        },
                        new
                        {
                            Product_Category_ID = 8,
                            Description = "products for wheels",
                            Name = "Wheel",
                            Product_Type_ID = 1
                        },
                        new
                        {
                            Product_Category_ID = 9,
                            Description = "bolts,nuts ect..",
                            Name = "Consumables",
                            Product_Type_ID = 1
                        },
                        new
                        {
                            Product_Category_ID = 10,
                            Description = "bolts,nuts ect..",
                            Name = "Consumables",
                            Product_Type_ID = 2
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.ProductType", b =>
                {
                    b.Property<int>("Product_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product_Type_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Product_Type_ID");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Product_Type_ID = 1,
                            Description = "Product has trailer components",
                            Name = "Truck"
                        },
                        new
                        {
                            Product_Type_ID = 2,
                            Description = "Product has truck components",
                            Name = "Trailer"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Product_Supplier", b =>
                {
                    b.Property<int>("Supplierid")
                        .HasColumnType("int");

                    b.Property<int>("Productid")
                        .HasColumnType("int");

                    b.Property<int>("Product_Supplier_ID")
                        .HasColumnType("int");

                    b.HasKey("Supplierid", "Productid");

                    b.HasIndex("Productid");

                    b.ToTable("Product_Suppliers");

                    b.HasData(
                        new
                        {
                            Supplierid = 1,
                            Productid = 1,
                            Product_Supplier_ID = 1
                        },
                        new
                        {
                            Supplierid = 1,
                            Productid = 2,
                            Product_Supplier_ID = 2
                        },
                        new
                        {
                            Supplierid = 2,
                            Productid = 2,
                            Product_Supplier_ID = 3
                        },
                        new
                        {
                            Supplierid = 2,
                            Productid = 3,
                            Product_Supplier_ID = 4
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Supplier", b =>
                {
                    b.Property<int>("Supplier_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Supplier_ID"));

                    b.Property<int>("Admin_ID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Supplier_ID");

                    b.HasIndex("Admin_ID");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Supplier_ID = 1,
                            Admin_ID = 1,
                            Email = "abc@gmail.com",
                            Name = "ABC Suppliers"
                        },
                        new
                        {
                            Supplier_ID = 2,
                            Admin_ID = 2,
                            Email = "xyz@gmail.com",
                            Name = "XYZ Suppliers"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Trailer", b =>
                {
                    b.Property<int>("TrailerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrailerID"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trailer_License")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Trailer_Status_ID")
                        .HasColumnType("int");

                    b.Property<int>("Trailer_Type_ID")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("TrailerID");

                    b.HasIndex("Trailer_Status_ID");

                    b.HasIndex("Trailer_Type_ID");

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TrailerStatus", b =>
                {
                    b.Property<int>("Trailer_Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trailer_Status_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trailer_Status_ID");

                    b.ToTable("TrailerStatuses");

                    b.HasData(
                        new
                        {
                            Trailer_Status_ID = 1,
                            Description = "Trailer is available for job",
                            Status = "Available"
                        },
                        new
                        {
                            Trailer_Status_ID = 2,
                            Description = "Trailer is busy with a job",
                            Status = "Unavailable"
                        },
                        new
                        {
                            Trailer_Status_ID = 3,
                            Description = "Trailer is undergoing maintenace",
                            Status = "Under Maintenance"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TrailerType", b =>
                {
                    b.Property<int>("Trailer_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trailer_Type_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trailer_Type_ID");

                    b.ToTable("TrailerTypes");

                    b.HasData(
                        new
                        {
                            Trailer_Type_ID = 1,
                            Description = "Coal transportation trailer",
                            Name = "Coal"
                        },
                        new
                        {
                            Trailer_Type_ID = 2,
                            Description = "Fuel transportation trailer",
                            Name = "Feul"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Truck", b =>
                {
                    b.Property<int>("TruckID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TruckID"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Truck_License")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Truck_Status_ID")
                        .HasColumnType("int");

                    b.HasKey("TruckID");

                    b.HasIndex("Truck_Status_ID");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TruckStatus", b =>
                {
                    b.Property<int>("Truck_Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Truck_Status_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Truck_Status_ID");

                    b.ToTable("TruckStatuses");

                    b.HasData(
                        new
                        {
                            Truck_Status_ID = 1,
                            Description = "Truck is available for job",
                            Status = "Available"
                        },
                        new
                        {
                            Truck_Status_ID = 2,
                            Description = "Truck is busy with a job",
                            Status = "Unavailable"
                        },
                        new
                        {
                            Truck_Status_ID = 3,
                            Description = "Truck is undergoing maintenace",
                            Status = "Under Maintenance"
                        });
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.User", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_ID"));

                    b.HasKey("User_ID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Delivery", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Job", "Job")
                        .WithMany("Deliveries")
                        .HasForeignKey("Job_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.Truck", null)
                        .WithMany("Deliveries")
                        .HasForeignKey("TruckID");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Delivery_Assignment", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Delivery", "Delivery")
                        .WithMany("Delivery_Assignments")
                        .HasForeignKey("Deliveryid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.Driver", "Driver")
                        .WithMany("Delivery_Assignments")
                        .HasForeignKey("Driverid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Driver", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.DriverStatus", "DriverStatus")
                        .WithMany("Drivers")
                        .HasForeignKey("Driver_Status_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverStatus");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Help", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.HelpCategory", "HelpCategory")
                        .WithMany("Helps")
                        .HasForeignKey("Help_Category_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HelpCategory");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Inventory", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("TrackwiseAPI.Models.Entities.Inventory", "Product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Invoice", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Order", "Order")
                        .WithMany("invoices")
                        .HasForeignKey("Order_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Job", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Admin", "Admin")
                        .WithMany("jobs")
                        .HasForeignKey("Admin_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.Client", "Client")
                        .WithMany("jobs")
                        .HasForeignKey("Client_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.JobStatus", "JobStatus")
                        .WithMany("jobs")
                        .HasForeignKey("Job_Status_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.JobType", "JobType")
                        .WithMany("jobs")
                        .HasForeignKey("Job_Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Client");

                    b.Navigation("JobStatus");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Order", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Customer", "Customer")
                        .WithMany("orders")
                        .HasForeignKey("Customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Order_Line", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("Orderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.Product", "Product")
                        .WithMany("OrderLines")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Payment", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("Order_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("Payment_Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Product", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("Product_Category_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.ProductCategory", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.ProductType", "ProductType")
                        .WithMany("productCategories")
                        .HasForeignKey("Product_Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Product_Supplier", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Product", "Product")
                        .WithMany("Product_Suppliers")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.Supplier", "Supplier")
                        .WithMany("Product_Suppliers")
                        .HasForeignKey("Supplierid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Supplier", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.Admin", "Admin")
                        .WithMany("Suppliers")
                        .HasForeignKey("Admin_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Trailer", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.TrailerStatus", "TrailerStatus")
                        .WithMany("Trailers")
                        .HasForeignKey("Trailer_Status_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackwiseAPI.Models.Entities.TrailerType", "TrailerType")
                        .WithMany("Trailers")
                        .HasForeignKey("Trailer_Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrailerStatus");

                    b.Navigation("TrailerType");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Truck", b =>
                {
                    b.HasOne("TrackwiseAPI.Models.Entities.TruckStatus", "TruckStatus")
                        .WithMany("Trucks")
                        .HasForeignKey("Truck_Status_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TruckStatus");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Admin", b =>
                {
                    b.Navigation("Suppliers");

                    b.Navigation("jobs");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Client", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Customer", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Delivery", b =>
                {
                    b.Navigation("Delivery_Assignments");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Driver", b =>
                {
                    b.Navigation("Delivery_Assignments");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.DriverStatus", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.HelpCategory", b =>
                {
                    b.Navigation("Helps");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Job", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.JobStatus", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.JobType", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("invoices");

                    b.Navigation("payments");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Product", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("OrderLines");

                    b.Navigation("Product_Suppliers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.ProductType", b =>
                {
                    b.Navigation("productCategories");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Supplier", b =>
                {
                    b.Navigation("Product_Suppliers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TrailerStatus", b =>
                {
                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TrailerType", b =>
                {
                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.Truck", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("TrackwiseAPI.Models.Entities.TruckStatus", b =>
                {
                    b.Navigation("Trucks");
                });
#pragma warning restore 612, 618
        }
    }
}
